#version 130

uniform int iUseTexture0; //use texture (0 - no, 1 - yes)?
uniform sampler2D iTexture0; //samples from a texture defined on an object using the tex attribute
uniform vec3 iPlayerPosition;
uniform vec4 iClipPlane;
uniform int iUseClipPlane;

varying vec3 iPosition;
varying vec3 iPositionWorld;
varying vec3 iNormal;
varying vec3 iNormalWorld;

void main()
{  

	if (!gl_FrontFacing) {
		discard;
	}

	//clipping plane part of shader
	if (iUseClipPlane == 1 && dot(iPositionWorld, iClipPlane.xyz) < iClipPlane.w) {
    		discard;	
        }

	//tiling part of shader
	vec3 vecx = vec3(1, 0, 0);
	if (abs(dot(vecx, iNormal)) > 0.9) {
		vecx = vec3(0, 1, 0);
	}

	vec3 vecy = cross(iNormal, vecx);
	vecx = cross(vecy, iNormal);

	float x_col = mod(dot(iPosition, vecx) - 0.5, 1.0);
	float y_col = mod(dot(iPosition, vecy) - 0.5, 1.0);
	float max_alpha = 1.0;

	int count = 0;
	if (x_col > 0.45 && x_col < 0.55) {
		max_alpha=min(abs(x_col-0.5), max_alpha);
		count = count+1;
	}
	if (y_col > 0.45 && y_col < 0.55) {
		max_alpha=min(abs(y_col-0.5), max_alpha);
		count = count+1;
	}
	
	float len = clamp(length(iPlayerPosition - iPosition) / 20.0, 0.0, 1.0);
	float tile_black = 0.5 + 0.5 * clamp(max_alpha * 20.0 + len, 0.0, 1.0);
		
	gl_FragColor= texture2D(iTexture0, gl_TexCoord[0].xy) * tile_black * gl_Color;		
        gl_FragColor.a = 1.0;
	

}

