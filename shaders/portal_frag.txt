uniform int iUseTexture0;
uniform sampler2D iTexture0;
uniform int iUseTexture1;
uniform sampler2D iTexture1;

uniform vec4 iClipPlane;
uniform int iUseClipPlane;
uniform vec4 iClipSphere;
uniform int iUseClipSphere;
uniform int iUseLighting;
uniform int iMultiplyAmbient;
uniform int iUseTiles;
uniform float iGlobalTime;

//fog-related uniforms
uniform int iFogEnabled;
uniform int iFogMode; //0 - linear, 1 - exp, 2 - exp2
uniform float iFogDensity;
uniform float iFogStart;
uniform float iFogEnd;
uniform vec3 iFogCol;
uniform vec3 iPlayerPosition;

varying vec3 iNormal;
varying vec3 iNormalWorld;
varying vec3 iNormalCamera;
varying vec3 iPosition;
varying vec3 iPositionWorld;
varying vec3 iPositionCamera;

void main( void ){

  //clipping plane part of shader
  if (iUseClipPlane == 1 && dot(iPositionWorld, iClipPlane.xyz) < iClipPlane.w) {
    discard;
  } 

  if (iUseClipSphere == 1 && dot(iPositionWorld-iClipSphere.xyz, iPositionWorld-iClipSphere.xyz) > iClipSphere.w * iClipSphere.w) {
    discard;
  }

	if (iUseTexture0 == 1) {
		gl_FragColor = gl_Color * texture2D(iTexture0, gl_TexCoord[0].xy);
	}
	else {
	vec2 uv = gl_TexCoord[0].st;    
        vec2 p = mod(uv*6.28318, 6.28318)-250.0;
	vec2 i = vec2(p);
	float c = 1.0;
	float inten = .005;
	int MAX_ITER = 6;
	for (int n = 0; n < MAX_ITER; n++) 
	{
		float t = iGlobalTime * (1.0 - (3.5 / float(n+1)));
		i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));
		c += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));
	}
	c /= float(MAX_ITER);
	c = 1.17-pow(c, 1.4);

	float pow_val = pow(abs(c), (sin(iGlobalTime)+1.0)*4.0+8.0) + 0.5;
	gl_FragColor = vec4(pow_val, pow_val, pow_val, 1.0);
	gl_FragColor *= gl_Color;
        gl_FragColor.w = gl_Color.w;
	}        

	if (iUseTexture1 == 1) {
		gl_FragColor *= texture2D(iTexture1, gl_TexCoord[0].xy);
	}
	    
}
